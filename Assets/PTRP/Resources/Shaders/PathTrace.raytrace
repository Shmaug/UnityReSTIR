#pragma max_recursion_depth 1

#include "../PathGeneration.cginc"

#define TALBOT_RMIS_TEMPORAL
#define TALBOT_RMIS_SPATIAL

uint FlattenIndex(uint2 id) { return id.y*_OutputExtent.x + id.x; }

RWStructuredBuffer<PathReservoir> _PathReservoirsIn;
RWStructuredBuffer<PathReservoir> _PathReservoirsOut;
PathReservoir LoadReservoir(uint2 id) { return _PathReservoirsIn[FlattenIndex(id)]; }
void StoreReservoir(uint2 id, PathReservoir r) { _PathReservoirsOut[FlattenIndex(id)] = r; }

uint _Seed;

// Canonical paths

[shader("miss")]
void Miss(inout ShadingData sd : SV_RayPayload) {
	sd._Position = POS_INFINITY;
    sd.BaseColor(1);
    sd.Emission(0);
    sd._PackedGeometryNormal = 0;
}

[shader("raygeneration")]
void SampleCanonicalPaths() {
    uint2 id = DispatchRaysIndex().xy;
    if (any(id >= _OutputExtent)) return;
    
    RayDesc ray = GetCameraRay(id);
    ShadingData sd = TraceRay(ray);

    _Radiance[id]  = float4(sd.Emission(), 1);
    _Albedo[id]    = float4(sd.BaseColor(), 1);
    _Positions[id] = float4(sd._Position, asfloat(sd._PackedGeometryNormal));

    PathReservoir r = MakeReservoir();

    if (all(isfinite(sd._Position.xyz))) {
        RandomSampler rng = MakeRandomSampler(_Seed, id, 0);
        r = SampleRadiance(sd, ray.Direction, rng);
    }

    StoreReservoir(id, r);
}


float _ReuseX;
bool InScreen(int2 p) { return all(p >= 0) && all(p < _OutputExtent) && (_ReuseX == 0 || p.x/(float)_OutputExtent.x*sign(_ReuseX) > _ReuseX); }

// Temporal reuse

RWStructuredBuffer<PathReservoir> _PrevReservoirs;
PathReservoir LoadPrevReservoir(uint2 id) { return _PrevReservoirs[FlattenIndex(id)]; }

RWTexture2D<float4> _PrevPositions;
float4x4 _PrevWorldToClip;
float3 _PrevCameraPos;

float _MCap;


float Mis(float a, float b) { return a / (a + b); }

void TemporalReuse(uint2 id, inout PathReservoir r) {
    if (!InScreen(id))
        return;
    
    float4 vertex = _Positions[id];
    if (!all(isfinite(vertex.xyz)))
        return;
    
    float4 prevClipPos = mul(_PrevWorldToClip, float4(vertex.xyz, 1));
    int2 prevPixel = ((prevClipPos.xy/prevClipPos.w)*.5 + .5) * (int2)_OutputExtent;
    if (!InScreen(prevPixel))
        return;

    float4 prevVertex = _PrevPositions[prevPixel];
    if (!all(isfinite(prevVertex.xyz)))
        return;
    
    PathReservoir candidate = LoadPrevReservoir(prevPixel);
    if (!(candidate._M > 0))
        return;
    if (!(candidate._W > 0)) {
        r._M += candidate._M;
        return;
    }

    float pr = Luminance(candidate._Sample._Radiance);
    float jacobianToCenter;
    candidate._Sample = ShiftTo(candidate._Sample, vertex, jacobianToCenter);
    if (!(jacobianToCenter > 0)) {
        r._M += candidate._M;
        return;
    }    
    
    #ifdef TALBOT_RMIS_TEMPORAL
    {
        float mi = r._M * Luminance(r._Sample._Radiance);
        float msum = mi;
    
        float jacobianToPrev;
        PathSample shifted = ShiftTo(r._Sample, prevVertex, _PrevCameraPos, jacobianToPrev);
        msum += candidate._M * Luminance(shifted._Radiance) * jacobianToPrev;
        
        r.PrepareMerge(msum > 0 ? mi/msum : 0);
    }
    {
        float msum = r._M * Luminance(candidate._Sample._Radiance) * jacobianToCenter;
        float mi = candidate._M * pr / jacobianToCenter;
        msum += mi;
        
        candidate.PrepareMerge(msum > 0 ? mi/msum : 0, jacobianToCenter);
    }
    #else
    float jacobianToPrev;
    PathSample s = ShiftTo(r._Sample, prevVertex, _PrevCameraPos, jacobianToPrev);
    r.PrepareMerge(Mis(r._M, jacobianToPrev > 0 ? candidate._M : 0));
    candidate.PrepareMerge(Mis(jacobianToCenter > 0 ? candidate._M : 0, r._M), jacobianToCenter);
    #endif

    RandomSampler rng = MakeRandomSampler(_Seed, id, 1000);

    r.Merge(rng.NextFloat().x, candidate);

    r.FinalizeMerge();
}

[shader("raygeneration")]
void TemporalReuse() {
    uint2 id = DispatchRaysIndex().xy;
    if (any(id >= _OutputExtent))
        return;
    PathReservoir r = LoadReservoir(id);
    TemporalReuse(id, r);
    if (_MCap > 0) r._M = min(r._M, _MCap);
    StoreReservoir(id, r);
}

// Spatial reuse

uint _SpatialReuseIteration;
uint _SpatialReuseSamples;
float _SpatialReuseRadius;

struct SpatialSampleLocations {
    RandomSampler _RngSeed;
    int2 _Center;

    int2 Get(uint index) {
        RandomSampler tmp = _RngSeed;;
        tmp.SkipNext(index);
        return _Center + int2(SampleConcentricDisc(tmp.NextFloat().xy) * _SpatialReuseRadius);
    }
};
SpatialSampleLocations MakeSpatialSampleLocations(inout RandomSampler rng, int2 center) {
    SpatialSampleLocations sg;
    sg._RngSeed = rng;
    sg._Center = center;
    rng.SkipNext(_SpatialReuseSamples);
    return sg;
}

#ifdef TALBOT_RMIS_SPATIAL
float ComputeSpatialMisWeight(SpatialSampleLocations sg, PathReservoir sample, float jacobianToCenter, float centerM, int candidateIndex) {
    float mi = 0;
    float msum = centerM * Luminance(sample._Sample._Radiance) * jacobianToCenter;
    if (candidateIndex == -1)
        mi = msum;
    for (uint i = 0; i < _SpatialReuseSamples; i++) {
        int2 p = sg.Get(i);
        if (!InScreen(p) || all(p == sg._Center))
            continue;
        float4 vp = _Positions[p];
        if (!all(isfinite(vp.xyz)))
            continue;

        PathReservoir candidate = LoadReservoir(p);
        if (!(candidate._M > 0))
            continue;

        // Determine whether p could have generated sample by shifting sample to p's vertex

        float jacobian;
        PathSample shifted = ShiftTo(sample._Sample, vp, jacobian);
        if (jacobian > 0) {
            float m = candidate._M * Luminance(shifted._Radiance) * jacobian;
            msum += m;
            if (candidateIndex == i)
                mi = m;
        }
    }
    return msum > 0 ? mi/msum : 0;
}
float FinalizeSpatialMisWeight(SpatialSampleLocations sg, PathReservoir sample, float centerM, int selectedIndex) {
    return 1;
}
#else
float ComputeSpatialMisWeight(SpatialSampleLocations sg, PathReservoir sample, float jacobianToCenter, float centerM, int candidateIndex) {
    return sample._M;
}
float FinalizeSpatialMisWeight(SpatialSampleLocations sg, PathReservoir sample, float centerM, int selectedIndex) {
    float msum = centerM;
    for (uint i = 0; i < _SpatialReuseSamples; i++) {
        int2 p = sg.Get(i);
        if (!InScreen(p) || all(p == sg._Center))
            continue;
        float4 vp = _Positions[p];
        if (!all(isfinite(vp.xyz)))
            continue;

        PathReservoir candidate = LoadReservoir(p);
        if (!(candidate._M > 0))
            continue;

        if (i == selectedIndex) {
            msum += candidate._M;
            continue;
        }

        // Determine whether p could have generated sample by shifting sample to p's vertex

        float jacobian;
        PathSample shifted = ShiftTo(sample._Sample, vp, jacobian);
        if (jacobian > 0) {
            msum += candidate._M;
        }
    }
    return msum > 0 ? 1/msum : 0;
}
#endif

void SpatialReuse(uint2 id, inout PathReservoir r) {
    if (!InScreen(id))
        return;
    
    float4 vertex = _Positions[id];
    if (!all(isfinite(vertex.xyz)))
        return;
    
    RandomSampler rng = MakeRandomSampler(_Seed, id, (2+_SpatialReuseIteration)*1000);
    SpatialSampleLocations sg = MakeSpatialSampleLocations(rng, id);

    int selectedIndex = -1;

    float centerM = r._M;
    r.PrepareMerge(ComputeSpatialMisWeight(sg, r, 1, centerM, -1));

    for (uint i = 0; i < _SpatialReuseSamples; i++) {
        int2 p = sg.Get(i);
        if (!InScreen(p) || all(p == sg._Center))
            continue;
        if (!all(isfinite(_Positions[p].xyz)))
            continue;

        PathReservoir candidate = LoadReservoir(p);
        if (candidate._M <= 0)
            continue;

        if (candidate._W <= 0 || isnan(candidate._W)) {
            r._M += candidate._M;
            continue;
        }
        
        // shift candidate's sample to here
        float jacobian;
        candidate._Sample = ShiftTo(candidate._Sample, vertex, jacobian);

        if (jacobian <= 0 || isnan(jacobian)) {
            r._M += candidate._M;
            continue;
        }
        
        candidate.PrepareMerge(ComputeSpatialMisWeight(sg, candidate, jacobian, centerM, i), jacobian);
    
        if (r.Merge(rng.NextFloat().x, candidate))
            selectedIndex = i;
    }
    
    if (r._W > 0) {
        r._W *= FinalizeSpatialMisWeight(sg, r, centerM, selectedIndex);
        r.FinalizeMerge();
    }
}

[shader("raygeneration")]
void SpatialReuse() {
    uint2 id = DispatchRaysIndex().xy;
    if (any(id >= _OutputExtent))
        return;

    PathReservoir r = LoadReservoir(id);
    if (_MCap <= 0 || r._M < _MCap)
        SpatialReuse(id, r);
    if (_MCap > 0) r._M = min(r._M, _MCap);
    StoreReservoir(id, r);
}